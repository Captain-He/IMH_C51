C51 COMPILER V9.06   DS3231_CLOCK                                                          04/06/2017 20:47:25 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE DS3231_CLOCK
OBJECT MODULE PLACED IN DS3231_Clock.OBJ
COMPILER INVOKED BY: C:\Users\ARM1\Desktop\Keil uVision4 c51\C51\BIN\C51.EXE DS3231_Clock.c LARGE BROWSE DEBUG OBJECTEXT
                    -END

line level    source

   1          #include<reg52.h> //51µ¥Æ¬»ú³£ÓÃµÄÍ·ÎÄ¼þ£¬¶¨Òå³£ÓÃµÄIO¿Ú
   2          #include "DS3231.h" //DS3231Ä£¿é×Ô¶¨ÒåÍ·ÎÄ¼þ
   3          #include "LedSegmentDisplay.h" //ÊýÂë¹ÜÏÔÊ¾×Ô¶¨ÒåÍ·ÎÄ¼þ
   4          #include "Led.h" //LEDµÆ×Ô¶¨ÒåÍ·ÎÄ¼þ
   5          #include "Protect.h"
   6          #include "HCSR04.h" //³¬Éù²¨Í·ÎÄ¼þ
   7          
   8          
   9          void DS3231_main() ;
  10          void time_go();
  11          
  12          #define uint unsigned int 
  13          #define uchar unsigned char
  14          
  15          sbit sound = P2^3;    //·äÃùÆ÷IO¿Ú
  16          //sbit play  = P1^4;    //ISD1820µ¥´Î²¥·ÅIO¿Ú
  17          //sbit led=P1^3;
  18          bit flag2=0;
  19          uchar temp,hour,minute,second,hour1,minute1,second1;
  20          uchar RXDdata[50] = {0};
  21          uint count = 0,m = 0;
  22          uint a,t,v,h,num = 0,numb = 0;
  23          uchar code table[] = { //ÊýÂë¹ÜÏÔÊ¾±í
  24                          0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x8C,0xBF,0xC6,0xA1,0x86,0xFF,0xbf
  25          };
  26          
  27          DS3231_TIME CurrentTime; //DS3231Ê±ÖÓ×Ô¶¨ÒåÊ±¼ä½á¹¹Ìå
  28          
  29          
  30          void sendchar(uchar byte)
  31          {
  32   1              SBUF = byte;
  33   1              while(!TI);
  34   1              TI = 0;
  35   1      }
  36          void sendString(uchar* s)
  37          {
  38   1              while(*s!='\0')
  39   1              {
  40   2                      sendchar(*s);
  41   2                      s++;
  42   2              }
  43   1      }
  44          
  45          void initEsp()
  46          {
  47   1              SCON = 0x50; //8Î»Êý¾Ý£¬¿É±ä²¨ÌØÂÊ
  48   1              TMOD = 0x20; //ÉèÖÃ¶¨Ê±Æ÷1Î»16Î»×Ô¶¯ÖØ×°Ä£Ê½
  49   1              TL1  = 0xfd; //ÉèÖÃ¶¨Ê±Æ÷³õÖµ
  50   1              TH1  = 0xfd;
  51   1              ET1  = 0; //½ûÖ¹¶¨Ê±Æ÷1ÖÐ¶Ï
  52   1              TR1  = 1; //Æô¶¯¶¨Ê±Æ÷1
  53   1              EA   = 1;
  54   1              for(a = 0; a < 10000; a++); //ÑÓÊ±¼¸Ãë£¬ÈÃÄ£¿éÓÐÊ±¼äÆô¶¯
C51 COMPILER V9.06   DS3231_CLOCK                                                          04/06/2017 20:47:25 PAGE 2   

  55   1              sendString("AT+CWMODE=2\r\n"); //ÉèÖÃÎªsoftAPÄ£Ê½
  56   1              /*
  57   1              for(a = 0; a < 1000; a++); //ÑÓÊ±¼¸Ãë£¬ÈÃÄ£¿éÓÐÊ±¼äÆô¶¯
  58   1              sendString("AT+RST\r\n");
  59   1              */ 
  60   1              for(a = 0; a < 10000; a++); 
  61   1              sendString("AT+CIPMUX=1\r\n"); //Æô¶¯¶àÁ¬½Ó
  62   1      
  63   1              for(a = 0; a < 10000; a++);
  64   1              sendString("AT+CIPSERVER=1,8888\r\n");//½¨Á¢server£¬Ä¬ÈÏ¶Ë¿ÚÎª8888
  65   1              for(a = 0; a < 10000; a++); 
  66   1              RI=0;
  67   1              ES=1; //³õÊ¼»¯Íê³É£¬´®ÐÐ¿ÚÖÐ¶Ï´ò¿ª
  68   1      }
  69          
  70          void getData()
  71          {
  72   1              if(flag2 == 1)
  73   1              { 
  74   2                      for(t = 0; t < 50; t++)
  75   2                      {
  76   3                              sendchar(RXDdata[t]);
  77   3                              for(a = 0; a < 1000; a++); 
  78   3                      }
  79   2                      sendchar('\n');
  80   2      
  81   2                      while(RXDdata[numb]!='@')
  82   2                      {
  83   3                              if(RXDdata[numb]==' ') num=num+1;
  84   3                              if(num==4)
  85   3                                 h=numb;
  86   3                              if(num==10)      //numb ±éÀú        
  87   3                              {                // v Ê±¼äÇ°ÄÇ¸ö¿Õ¸ñµÄÊý×éË÷Òý
  88   4                              v=numb;         //num¿Õ¸ñµÄ¸öÊý 
  89   4                                      RXDdata[numb]='@';
  90   4                                      numb--;
  91   4                              }
  92   3                              numb++;
  93   3                      }
  94   2                      if(RXDdata[h]=='1')
  95   2                      {
  96   3                        hour=(RXDdata[v+1]-'0')*10+(RXDdata[v+2]-'0');
  97   3                minute=(RXDdata[v+4]-'0')*10+(RXDdata[v+5]-'0');
  98   3                    second=(RXDdata[v+7]-'0')*10+(RXDdata[v+8]-'0');   
  99   3                      }
 100   2                       sendchar(RXDdata[h]);
 101   2                 if(RXDdata[h]=='2')
 102   2                      {
 103   3                       hour1=(RXDdata[v+1]-'0')*10+(RXDdata[v+2]-'0');
 104   3                minute1=(RXDdata[v+4]-'0')*10+(RXDdata[v+5]-'0');     
 105   3                        second1=(RXDdata[v+7]-'0')*10+(RXDdata[v+8]-'0');
 106   3                      } 
 107   2              
 108   2                      num = 0;
 109   2                      v=0;
 110   2                      h=0;
 111   2                      numb=0;
 112   2      
 113   2                      SectorErase(0x2000);//²Á³ýÉÈÇø
 114   2                      byte_write(0x2000,hour);//ÖØÐÂÐ´ÈëÊý¾Ý
 115   2              byte_write(0x2010,minute);
 116   2              byte_write(0x2020,second);
C51 COMPILER V9.06   DS3231_CLOCK                                                          04/06/2017 20:47:25 PAGE 3   

 117   2      
 118   2                      flag2 = 0;
 119   2                      count = 0;
 120   2                      for(m=0;m<50;m++)
 121   2                      {
 122   3                              RXDdata[m] = '*';       
 123   3                      }
 124   2              }
 125   1      }
 126          
 127          void main()
 128          {
 129   1      
 130   1              initEsp();
 131   1              //led=1;
 132   1              DS3231_main();
 133   1      
 134   1              count =0;
 135   1              flag2 = 0;
 136   1      
 137   1              for(m=0;m<50;m++)
 138   1              {
 139   2                      RXDdata[m] = '*';
 140   2      
 141   2              }
 142   1              led_off();
 143   1              led_off1();
 144   1              while(1)
 145   1              { 
 146   2                      getData();
 147   2                      time_go();
 148   2              }
 149   1      }
 150          
 151          void SISR(void) interrupt 4
 152          { 
 153   1              if(RI == 1)
 154   1              {
 155   2                      ES = 0; //¹Ø±Õ´®ÐÐÖÐ¶Ï
 156   2                      RI = 0; //Çå³ý´®ÐÐ½ÓÊÜ±êÖ¾Î»
 157   2                      temp =SBUF; //´Ó´®¿Ú»º³åÇøÈ¡µÃÊý¾Ý
 158   2                      if(count<50)
 159   2                      { 
 160   3                              RXDdata[count]=temp;
 161   3                              count++;
 162   3                              if(RXDdata[0]=='+')
 163   3                              {
 164   4                                 if(temp=='@')
 165   4                                 {
 166   5                                              flag2 = 1;
 167   5                                              count = 50;
 168   5                                      } 
 169   4                              }
 170   3                              else
 171   3                              {
 172   4                                      flag2 = 0;
 173   4                                      count = 0;
 174   4                              }
 175   3                      // if(temp=='@'||temp=='\0'||count>=20)
 176   3                      // flag=1;
 177   3                      } 
 178   2              ES = 1; //ÔÊÐí´®¿ÚÖÐ¶Ï
C51 COMPILER V9.06   DS3231_CLOCK                                                          04/06/2017 20:47:25 PAGE 4   

 179   2              }
 180   1      }
 181          /********* *****************************/
 182          
 183          
 184          
 185          
 186          void warn(uchar n) //·äÃùÆ÷ÄÖÁå
 187          {
 188   1              uchar i;
 189   1              for(i = 0; i < n; i++)
 190   1              {
 191   2                      sound = 0;
 192   2                      delay(20);
 193   2                      sound = 1; 
 194   2              }
 195   1      }
 196          
 197          void AlarmClock(uchar hour, uchar minute, uchar second,uchar hour1, uchar minute1,uchar second1) //ÉèÖÃÄÖÖ
             -Ó
 198          {
 199   1              uchar clock[5];
 200   1              DS3231WriteData(DS3231_ALARM1HOUR, hour); //Ð´ÈëÄÖÖÓÊ±¼ä
 201   1              DS3231WriteData(DS3231_ALARM1MINUTE, minute);
 202   1              DS3231WriteData(DS3231_ALARM1SECOND, second);
 203   1              clock[0] = DS3231ReadData(DS3231_ALARM1HOUR); //¶ÁÈ¡ÄÖÖÓÊ±¼ä
 204   1              clock[1] = DS3231ReadData(DS3231_ALARM1MINUTE);
 205   1              clock[2] = DS3231ReadData(DS3231_ALARM1SECOND);
 206   1      
 207   1              DS3231WriteData(DS3231_ALARM2HOUR, hour1); //Ð´ÈëÄÖÖÓÊ±¼ä
 208   1              DS3231WriteData(DS3231_ALARM2MINUTE, minute1);
 209   1              DS3231WriteData(DS3231_ALARM2SECOND, second1);
 210   1              clock[3] = DS3231ReadData(DS3231_ALARM2HOUR); //¶ÁÈ¡ÄÖÖÓÊ±¼ä
 211   1              clock[4] = DS3231ReadData(DS3231_ALARM2MINUTE);
 212   1              clock[5] = DS3231ReadData(DS3231_ALARM2SECOND);
 213   1              
 214   1              if(clock[0]==CurrentTime.Hour && clock[1]==CurrentTime.Minute && clock[2]==CurrentTime.Second)
 215   1              {
 216   2                      warn(8);
 217   2                      hcsr= 1;
 218   2                      led_flash(1, 0, 1);
 219   2              //      play = 0; //µçÑ¹µÄ±ä»¯´¥·¢ISD1820µÄ²¥·Å
 220   2              //      play = 1;
 221   2                      flag1=0;
 222   2                      
 223   2                      distance();
 224   2                      S=0;
 225   2                      hcsr=0;
 226   2                // ´®¿Ú³õÊ¼»¯
 227   2                SCON = 0x50; //8Î»Êý¾Ý£¬¿É±ä²¨ÌØÂÊ
 228   2                TMOD = 0x20; //ÉèÖÃ¶¨Ê±Æ÷1Î»16Î»×Ô¶¯ÖØ×°Ä£Ê½
 229   2                TL1  = 0xfd; //ÉèÖÃ¶¨Ê±Æ÷³õÖµ
 230   2                TH1  = 0xfd;
 231   2                ET1  = 0; //½ûÖ¹¶¨Ê±Æ÷1ÖÐ¶Ï
 232   2                TR1  = 1; //Æô¶¯¶¨Ê±Æ÷1
 233   2                EA   = 1;
 234   2                      
 235   2          delay(8000);
 236   2          
 237   2              }
 238   1                      if(clock[3]==CurrentTime.Hour && clock[4]==CurrentTime.Minute&& clock[5]==CurrentTime.Second)
 239   1              {
C51 COMPILER V9.06   DS3231_CLOCK                                                          04/06/2017 20:47:25 PAGE 5   

 240   2                      warn(8);
 241   2                      hcsr=2;
 242   2                      led_flash1(1, 0, 1);
 243   2              //      play = 0; //µçÑ¹µÄ±ä»¯´¥·¢ISD1820µÄ²¥·Å
 244   2              //      play = 1;
 245   2                      flag1_1=0;
 246   2              
 247   2                      distance_1();
 248   2                       S_1=0;
 249   2                       hcsr=0;
 250   2                // ´®¿Ú³õÊ¼»¯
 251   2                SCON = 0x50; //8Î»Êý¾Ý£¬¿É±ä²¨ÌØÂÊ
 252   2                TMOD = 0x20; //ÉèÖÃ¶¨Ê±Æ÷1Î»16Î»×Ô¶¯ÖØ×°Ä£Ê½
 253   2                TL1  = 0xfd; //ÉèÖÃ¶¨Ê±Æ÷³õÖµ
 254   2                TH1  = 0xfd;
 255   2                ET1  = 0; //½ûÖ¹¶¨Ê±Æ÷1ÖÐ¶Ï
 256   2                TR1  = 1; //Æô¶¯¶¨Ê±Æ÷1
 257   2                EA   = 1;
 258   2                      
 259   2          delay(8000);
 260   2              }
 261   1      
 262   1      } 
 263          
 264          void DS3231_main()
 265          {
 266   1              DS3231Init();
 267   1              led_off();
 268   1      //      led_off1();
 269   1              if(!BcdByte(DS3231ReadData(DS3231_SECOND)))
 270   1              {
 271   2                      DS3231SetTime(DS3231_HOUR, 11); //ÉèÖÃÊ±¼äÎª11:12:41
 272   2                      DS3231SetTime(DS3231_MINUTE, 12); 
 273   2                      DS3231SetTime(DS3231_SECOND, 41); 
 274   2              }
 275   1      } 
 276          
 277          void time_go()
 278          { 
 279   1              uchar t0, t1, t2, t3, t4, t5;
 280   1              DS3231GetTime(&CurrentTime); //»ñÈ¡µ±Ç°Ê±¼ä£¬¸ñÊ½»¯²¢ÔÚÊýÂë¹ÜÉÏÏÔÊ¾³öÀ´
 281   1              DS3231TimeToStr(&CurrentTime); 
 282   1              t0 = CurrentTime.TimeString[0];
 283   1              t1 = CurrentTime.TimeString[1];
 284   1              t2 = CurrentTime.TimeString[3];
 285   1              t3 = CurrentTime.TimeString[4];
 286   1              t4 = CurrentTime.TimeString[6];
 287   1              t5 = CurrentTime.TimeString[7];
 288   1              display(table[t0], table[t1], table[t2], table[t3], table[t4], table[t5]);
 289   1              
 290   1              hour   = byte_read(0x2000);
 291   1              minute = byte_read(0x2010);
 292   1              second = byte_read(0x2020);
 293   1              AlarmClock(hour, minute, 00,hour1, minute1, 00);
 294   1      }
 295          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3051    ----
   CONSTANT SIZE    =     84    ----
   XDATA SIZE       =    123      17
C51 COMPILER V9.06   DS3231_CLOCK                                                          04/06/2017 20:47:25 PAGE 6   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
